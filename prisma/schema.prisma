generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  username     String   @unique
  passwordHash String
  name         String?
  avatar       String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sentMessages     Message[]         @relation("SentMessages")
  participantChats ChatParticipant[]
  oauthAccounts    OAuthAccount[]

  @@index([email])
  @@index([username])
  @@map("users")
}

model OAuthAccount {
  id             String   @id @default(uuid()) @db.Uuid
  userId         String   @db.Uuid
  provider       String
  providerUserId String
  accessToken    String
  refreshToken   String?
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId])
  @@map("oauth_accounts")
}

model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  participants ChatParticipant[]

  @@map("chats")
}

model ChatParticipant {
  id       String   @id @default(uuid()) @db.Uuid
  chatId   String   @db.Uuid
  userId   String   @db.Uuid
  isAdmin  Boolean  @default(false)
  joinedAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
  @@map("chat_participants")
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  chatId    String   @db.Uuid
  senderId  String   @db.Uuid
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}
